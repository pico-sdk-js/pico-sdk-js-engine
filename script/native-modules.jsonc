{
    "modules": [
        {
            "name": "global",
            "isGlobal": true,
            "functions": [
                { "tsDef": "function require (id: string): any" },
                { "tsDef": "function print (...data: any[]): void" }
            ]
        },
        {
            "name": "hardware",
            "types": {
                "resus_callback_t": "() => void",
                "gpio_irq_callback_t": "(gpio: number, event_mask: number) => void",
                "hardware_alarm_callback_t": "(alarm_num: number) => void"
            },
            "functions": [
                // ADC functions (see https://www.raspberrypi.com/documentation/pico-sdk/hardware.html#functions)
                { "fn": "void adc_init ()" },
                { "fn": "void adc_gpio_init (uint gpio)" },
                { "fn": "void adc_select_input (uint input)" },
                { "fn": "uint adc_get_selected_input ()" },
                { "fn": "void adc_set_round_robin (uint input_mask)" },
                { "fn": "void adc_set_temp_sensor_enabled (bool enable)" },
                { "fn": "uint16_t adc_read ()" },
                { "fn": "void adc_run (bool run)" },
                { "fn": "void adc_set_clkdiv (float clkdiv)" },
                { "fn": "void adc_fifo_setup (bool en, bool dreq_en, uint16_t dreq_thresh, bool err_in_fifo, bool byte_shift)" },
                { "fn": "bool adc_fifo_is_empty ()" },
                { "fn": "uint8_t adc_fifo_get_level ()" },
                { "fn": "uint16_t adc_fifo_get ()" },
                { "fn": "uint16_t adc_fifo_get_blocking ()" },
                { "fn": "void adc_fifo_drain ()" },
                { "fn": "void adc_irq_set_enabled (bool enabled)" },

                // Clock functions (see https://www.raspberrypi.com/documentation/pico-sdk/hardware.html#hardware_clocks)
                // NOTE: "enum clock_index" replaced with "int" to avoid issues on linux builds
                { "fn": "void clocks_init ()" },
                { "fn": "bool clock_configure (int clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq)" },
                { "fn": "void clock_stop (int clk_index)" },
                { "fn": "uint32_t clock_get_hz (int clk_index)" },
                { "fn": "uint32_t frequency_count_khz (uint src)" },
                { "fn": "void clock_set_reported_hz (int clk_index, uint hz)" },
                { "fn": "void clocks_enable_resus (resus_callback_t resus_callback)", "callback": "CALLBACK_CLOCK_ENABLE_RESUS" },
                { "fn": "void clock_gpio_init_int_frac (uint gpio, uint src, uint32_t div_int, uint8_t div_frac)" },
                { "fn": "void clock_gpio_init (uint gpio, uint src, float div)" },
                { "fn": "bool clock_configure_gpin (int clk_index, uint gpio, uint32_t src_freq, uint32_t freq)" },

                // GPIO functions (see https://www.raspberrypi.com/documentation/pico-sdk/hardware.html#hardware_gpio)
                { "fn": "void gpio_set_function (uint gpio, int fn)" },
                { "fn": "int gpio_get_function (uint gpio)" },
                { "fn": "void gpio_set_pulls (uint gpio, bool up, bool down)" },
                { "fn": "void gpio_pull_up (uint gpio)" },
                { "fn": "bool gpio_is_pulled_up (uint gpio)" },
                { "fn": "void gpio_pull_down (uint gpio)" },
                { "fn": "bool gpio_is_pulled_down (uint gpio)" },
                { "fn": "void gpio_disable_pulls (uint gpio)" },
                { "fn": "void gpio_set_irqover (uint gpio, uint value)" },
                { "fn": "void gpio_set_outover (uint gpio, uint value)" },
                { "fn": "void gpio_set_inover (uint gpio, uint value)" },
                { "fn": "void gpio_set_oeover (uint gpio, uint value)" },
                { "fn": "void gpio_set_input_enabled (uint gpio, bool enabled)" },
                { "fn": "void gpio_set_input_hysteresis_enabled (uint gpio, bool enabled)" },
                { "fn": "bool gpio_is_input_hysteresis_enabled (uint gpio)" },
                { "fn": "void gpio_set_slew_rate (uint gpio, int slew)" },
                { "fn": "int gpio_get_slew_rate (uint gpio)" },
                { "fn": "void gpio_set_drive_strength (uint gpio, int drive)" },
                { "fn": "int gpio_get_drive_strength (uint gpio)" },
                { "fn": "void gpio_set_irq_enabled (uint gpio, uint32_t event_mask, bool enabled)" },
                { "fn": "void gpio_set_irq_callback (gpio_irq_callback_t callback)", "callback": "CALLBACK_GPIO_IRQ" },
                { "fn": "void gpio_set_irq_enabled_with_callback (uint gpio, uint32_t event_mask, bool enabled, gpio_irq_callback_t callback)", "external": true },
                { "fn": "void gpio_set_dormant_irq_enabled (uint gpio, uint32_t event_mask, bool enabled)" },
                { "fn": "uint32_t gpio_get_irq_event_mask (uint gpio)" },
                { "fn": "void gpio_acknowledge_irq (uint gpio, uint32_t event_mask)" },
                // { "fn": "void gpio_add_raw_irq_handler_with_order_priority_masked (uint gpio_mask, irq_handler_t handler, uint8_t order_priority)" },
                // { "fn": "void gpio_add_raw_irq_handler_with_order_priority (uint gpio, irq_handler_t handler, uint8_t order_priority)" },
                // { "fn": "void gpio_add_raw_irq_handler_masked (uint gpio_mask, irq_handler_t handler)" },
                // { "fn": "void gpio_add_raw_irq_handler (uint gpio, irq_handler_t handler)", "callback": "CALLBACK_GPIO_IRQ" },
                // { "fn": "void gpio_remove_raw_irq_handler_masked (uint gpio_mask, irq_handler_t handler)" },
                // { "fn": "void gpio_remove_raw_irq_handler (uint gpio, irq_handler_t handler)" },
                { "fn": "void gpio_init (uint gpio)" },
                { "fn": "void gpio_deinit (uint gpio)" },
                { "fn": "void gpio_init_mask (uint gpio_mask)" },
                { "fn": "bool gpio_get (uint gpio)" },
                { "fn": "uint32_t gpio_get_all ()" },
                { "fn": "void gpio_set_mask (uint32_t mask)" },
                { "fn": "void gpio_clr_mask (uint32_t mask)" },
                { "fn": "void gpio_xor_mask (uint32_t mask)" },
                { "fn": "void gpio_put_masked (uint32_t mask, uint32_t value)" },
                { "fn": "void gpio_put_all (uint32_t value)" },
                { "fn": "void gpio_put (uint gpio, bool value)" },
                { "fn": "bool gpio_get_out_level (uint gpio)" },
                { "fn": "void gpio_set_dir_out_masked (uint32_t mask)" },
                { "fn": "void gpio_set_dir_in_masked (uint32_t mask)" },
                { "fn": "void gpio_set_dir_masked (uint32_t mask, uint32_t value)" },
                { "fn": "void gpio_set_dir_all_bits (uint32_t values)" },
                { "fn": "void gpio_set_dir (uint gpio, bool out)" },
                { "fn": "bool gpio_is_dir_out (uint gpio)" },
                { "fn": "uint gpio_get_dir (uint gpio)" },

                // Timer functions (see https://www.raspberrypi.com/documentation/pico-sdk/hardware.html#functions140)
                { "fn": "uint32_t time_us_32 ()" },
                { "fn": "uint64_t time_us_64 ()" },
                { "fn": "void busy_wait_us_32 (uint32_t delay_us)" },
                { "fn": "void busy_wait_us (uint64_t delay_us)" },
                { "fn": "void busy_wait_ms (uint32_t delay_ms)" },
                { "fn": "void busy_wait_until (uint64_t t)" },
                { "fn": "bool time_reached (uint64_t t)" },
                { "fn": "void hardware_alarm_claim (uint32_t alarm_num)" },
                { "fn": "int32_t hardware_alarm_claim_unused (bool required)" },
                { "fn": "void hardware_alarm_unclaim (uint32_t alarm_num)" },
                { "fn": "bool hardware_alarm_is_claimed (uint32_t alarm_num)" },
                { "fn": "void hardware_alarm_set_callback (uint32_t alarm_num, hardware_alarm_callback_t callback)", "callback": "CALLBACK_HARDWARE_ALARM" },
                { "fn": "bool hardware_alarm_set_target (uint32_t alarm_num, uint64_t t)"  },
                { "fn": "void hardware_alarm_cancel (uint32_t alarm_num)" },
                { "fn": "void hardware_alarm_force_irq (uint32_t alarm_num)" }
            ]
        }
    ]
}